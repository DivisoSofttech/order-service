
# ===================================================================
# Spring Boot configuration.
#
# This configuration will be overridden by the Spring profile you use,
# for example application-dev.yml if you use the "dev" profile.
#
# More information on profiles: https://www.jhipster.tech/profiles/
# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
# ===================================================================
eureka:
# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================
   client:
      enabled: true
      healthcheck:
         enabled: true
      fetch-registry: true
      register-with-eureka: true
      instance-info-replication-interval-seconds: 10
      registry-fetch-interval-seconds: 10
   instance:
      appname: order
      instanceId: order:${spring.application.instance-id:${random.value}}
      lease-renewal-interval-in-seconds: 5
      lease-expiration-duration-in-seconds: 10
      status-page-url-path: ${management.endpoints.web.base-path}/info
      health-check-url-path: ${management.endpoints.web.base-path}/health
      metadata-map:
         zone: primary # This is needed for the load balancer
         profile: ${spring.profiles.active}
         version: null
         git-version: ${git.commit.id.describe:}
         git-commit: ${git.commit.id.abbrev:}
         git-branch: ${git.branch:}
ribbon:
   eureka:
      enabled: true
feign:
   hystrix:
      enabled: false
# client:
hystrix:
  command:
    default:
      execution:
        isolation:
          strategy: SEMAPHORE
          # See https://github.com/spring-cloud/spring-cloud-netflix/issues/1330
          # thread:
          #     timeoutInMilliseconds: 10000
  shareSecurityContext: true

management:
   endpoints:
      web:
         base-path: /management
         exposure:
            include:
            - configprops
            - env
            - health
            - info
            - jhimetrics
            - logfile
            - loggers
            - prometheus
            - threaddump
   endpoint:
      health:
         show-details: when-authorized
         roles: ROLE_ADMIN
      jhimetrics:
         enabled: true
   info:
      git:
         mode: full
   health:
      mail:
         enabled: false # When using the MailService, configure an SMTP server and set this to true
   metrics:
      export:
# Prometheus is the default metrics backend
         prometheus:
            enabled: true
            step: 60
      enable:
         http: true
         jvm: true
         logback: true
         process: true
         system: true
      distribution:
         percentiles-histogram:
            all: true
         percentiles:
            all: 0, 0.5, 0.75, 0.95, 0.99, 1.0
      tags:
         application: ${spring.application.name}
      web:
         server:
            auto-time-requests: true
spring:
   autoconfigure:
      exclude: org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration,org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration
   application:
      name: order
   jmx:
      enabled: false
   data:
      jpa:
         repositories:
            bootstrap-mode: deferred
   jpa:
      open-in-view: false
      properties:
         hibernate.jdbc.time_zone: UTC
      hibernate:
         ddl-auto: none
         naming:
            physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
            implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
   messages:
      basename: i18n/messages
   main:
      allow-bean-definition-overriding: true
   mvc:
      favicon:
         enabled: false
   task:
      execution:
         thread-name-prefix: order-task-
         pool:
            core-size: 2
            max-size: 50
            queue-capacity: 10000
      scheduling:
         thread-name-prefix: order-scheduling-
         pool:
            size: 2
   thymeleaf:
      mode: HTML
   output:
      ansi:
         console-available: true
   security:
      oauth2:
         client:
            provider:
               oidc:
                  issuer-uri: https://dev.servers.divisosofttech.com/auth/realms/graeshoppe
            registration:
               oidc:
                  client-id: internal
                  client-secret: d4f03412-cdad-45b0-9ccc-beddd8399ac5
server:
   servlet:
      session:
         cookie:
            http-only: true
# Comma separated list of profiles that will trigger the ribbon to show
# Properties to be exposed on the /info management endpoint
info:
   display-ribbon-on-profiles: dev
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================
# ===================================================================
jhipster:
   clientApp:
      name: orderApp
# By default CORS is disabled. Uncomment to enable.
# cors:
#     allowed-origins: "*"
#     allowed-methods: "*"
#     allowed-headers: "*"
#     exposed-headers: "Authorization,Link,X-Total-Count"
#     allow-credentials: true
#     max-age: 1800
   mail:
      from: order@localhost
   swagger:
      default-include-pattern: /api/.*
      title: order API
      description: order API documentation
      version: 0.0.1
      terms-of-service-url: null
      contact-name: null
      contact-url: null
      contact-email: null
      license: null
      license-url: null
   security:
      oauth2:
         audience:
         - account
         - api://default
kafka:
   consumer:
      key.deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
      value.deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      bootstrap.servers: dev.servers.divisosofttech.com:9092
# ===================================================================
      group.id: ordergroup
      specific.avro.reader: true
      auto.offset.reset: earliest
      schema.registry.url: http://dev.servers.divisosofttech.com:8081
   producer:
      key.serializer: org.apache.kafka.common.serialization.StringSerializer
      value.serializer: com.diviso.graeshoppe.order.config.SerdeConfig
      bootstrap.servers: dev.servers.divisosofttech.com:9092
app:
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# to have type-safe configuration, like in the JHipsterProperties above
#
# More documentation is available at:
# https://www.jhipster.tech/common-application-properties/
# ===================================================================
   orderId-prefix: FEXP-
# application:
topic:
   payment:
      destination: paymentx
   order:
      destination: order
   notification:
      destination: notificationx
   approvalInfo:
      destination: approvalinfo
   cancellation:
      destination: cancellationrequest
   refund:
      destination: refunddetails
   orderstate:
     destination: orderstatechange 
bpmn:
   url: http://ec2-52-15-174-35.us-east-2.compute.amazonaws.com:8080/activiti-rest/service
   processId: process:1:47 #process:22:112468 #process:21:36433 #process:1:43 #process:4:78797 #process:2:42632 #process:1:10004
   security:
      basicAuth:
         username: kermit
         password: kermit